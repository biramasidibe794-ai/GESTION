# Generated by Django 5.2.7 on 2025-10-17 22:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnneeScolaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annee', models.IntegerField(unique=True)),
            ],
            options={
                'verbose_name': 'Année scolaire',
                'verbose_name_plural': 'Années scolaires',
            },
        ),
        migrations.CreateModel(
            name='Classe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('preferences', models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Semestre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50)),
                ('date_debut', models.DateField()),
                ('date_fin', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('etudiant', 'Étudiant'), ('enseignant', 'Enseignant'), ('admin', 'Administrateur')], max_length=20)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activation_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Enseignant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departement', models.CharField(blank=True, max_length=100)),
                ('specialite', models.CharField(blank=True, max_length=100)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profil_enseignant', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Cours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('classes', models.ManyToManyField(blank=True, related_name='cours', to='gestion_des_presences.classe')),
                ('enseignants', models.ManyToManyField(blank=True, related_name='cours', to='gestion_des_presences.enseignant')),
            ],
        ),
        migrations.CreateModel(
            name='Etudiant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_etudiant', models.CharField(max_length=20, unique=True)),
                ('programme', models.CharField(max_length=100)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profil_etudiant', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Seance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.DateTimeField()),
                ('fin', models.DateTimeField()),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='seances', to='gestion_des_presences.classe')),
                ('cours', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='seances', to='gestion_des_presences.cours')),
                ('enseignant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='seances', to='gestion_des_presences.enseignant')),
            ],
            options={
                'verbose_name': 'Séance',
            },
        ),
        migrations.CreateModel(
            name='Presence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statut', models.CharField(choices=[('present', 'Présent'), ('absent', 'Absent')], default='present', max_length=10)),
                ('horodatage', models.DateTimeField(auto_now_add=True)),
                ('meta', models.JSONField(blank=True, default=dict)),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presences', to='gestion_des_presences.etudiant')),
                ('seance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presences', to='gestion_des_presences.seance')),
            ],
        ),
        migrations.CreateModel(
            name='SeanceQR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('rotating', models.BooleanField(default=True)),
                ('seance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qr_tokens', to='gestion_des_presences.seance')),
            ],
        ),
        migrations.CreateModel(
            name='Inscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statut', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvée'), ('rejected', 'Rejetée')], default='pending', max_length=10)),
                ('demande_le', models.DateTimeField(default=django.utils.timezone.now)),
                ('approuve_le', models.DateTimeField(blank=True, null=True)),
                ('approuve_par', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inscriptions_validees', to=settings.AUTH_USER_MODEL)),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscrits', to='gestion_des_presences.classe')),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscriptions', to='gestion_des_presences.etudiant')),
            ],
            options={
                'indexes': [models.Index(fields=['classe'], name='gestion_des_classe__73bd41_idx'), models.Index(fields=['statut'], name='gestion_des_statut_f37e95_idx')],
                'constraints': [models.UniqueConstraint(fields=('etudiant', 'classe'), name='uniq_inscription_etudiant_classe')],
            },
        ),
        migrations.AddIndex(
            model_name='seance',
            index=models.Index(fields=['debut'], name='gestion_des_debut_4abda8_idx'),
        ),
        migrations.AddIndex(
            model_name='seance',
            index=models.Index(fields=['classe'], name='gestion_des_classe__01dd33_idx'),
        ),
        migrations.AddIndex(
            model_name='presence',
            index=models.Index(fields=['seance'], name='gestion_des_seance__d20a4b_idx'),
        ),
        migrations.AddIndex(
            model_name='presence',
            index=models.Index(fields=['etudiant'], name='gestion_des_etudian_bb44f9_idx'),
        ),
        migrations.AddConstraint(
            model_name='presence',
            constraint=models.UniqueConstraint(fields=('etudiant', 'seance'), name='uniq_presence_etudiant_seance'),
        ),
        migrations.AddIndex(
            model_name='seanceqr',
            index=models.Index(fields=['seance'], name='gestion_des_seance__d1da57_idx'),
        ),
        migrations.AddIndex(
            model_name='seanceqr',
            index=models.Index(fields=['expires_at'], name='gestion_des_expires_9f88ec_idx'),
        ),
    ]
